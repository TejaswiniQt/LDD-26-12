#include<linux/module.h>
#include<linux/fs.h>
#include<linux/cdev.h>
#include<linux/device.h>
#include<linux/kdev_t.h>
#include<linux/uaccess.h>

#define DEV_MEM 512

/* Pusedo char device memory */
char psuedo_device[DEV_MEM];

/*This holds device number */
dev_t device_number;

/* Cdev variable */
struct cdev pcd_cdev;

/*holds the class pointer */
struct class *class_pcd;

/*Holds device pointer */
struct device *device_pcd;


int pcd_open(struct inode *inode, struct file *filp)
{

	pr_info("Open was successful\n");
	return 0;
}

int pcd_release(struct inode *inode, struct file *filp)
{

	pr_info("Release was successful\n");
	
	return 0;
}

ssize_t pcd_read(struct file *filp, char __user *buff, size_t count, loff_t *f_pos)
{
	/* Adjust the count */
	if((*f_pos + count) > DEV_MEM)
		count = DEV_MEM - *f_pos;
	/* Copy to user*/
	if(copy_to_user(buff,&psuedo_device[*f_pos],count))
		return -EFAULT;
	/* Update the file position */
	*f_pos += count;
	pr_info("Number of bytes successfully read = %zu\n",count);
	/* Return the number of bytes which have been successfully read */
	return count;
}

ssize_t pcd_write(struct file *filp, const char __user *buff, size_t count, loff_t *f_pos)
{
	pr_info("Write requested for %zu\n",count);
	pr_info("Current file position = %lld\n",*f_pos);
	/* Adjust the count */
	if((*f_pos + count) > DEV_MEM)
		count = DEV_MEM - *f_pos;
	if(!count)
		return -ENOMEM;
	/* Copy from user */ 
	if(copy_from_user(&psuedo_device[*f_pos],buff,count))
		return -EFAULT;
	/* Update the file position */
	*f_pos += count;
	pr_info("Number of bytes successfully written = %zu\n",count);
	pr_info("Updated file position = %lld\n",*f_pos);
	/*Return number of bytes written */
	return count;
}

loff_t pcd_lseek(struct file *filp, loff_t offset, int whence)
{
	pr_info("lseek requested\n");
	pr_info("Current file position is : %lld\n",filp->f_pos);
	loff_t temp;
	switch(whence)
	{
		case SEEK_SET:
			if((offset > DEV_MEM) || (offset < 0))
				return -EINVAL;
			filp->f_pos = offset;
			break;
		case SEEK_CUR:
			temp = filp->f_pos + offset;
			if((temp > DEV_MEM) || (temp < 0))
				return -EINVAL;
			filp->f_pos = temp;
			break;
		case SEEK_END:
			temp = DEV_MEM + offset;
			if((temp > DEV_MEM) || (temp < 0))
				return -EINVAL;
			filp->f_pos = temp;
			break;
	}
	pr_info("New value of file position is : %lld\n",filp->f_pos);
	return filp->f_pos;
}

/* file operation variable */
struct file_operations pcd_fops = 
{
	.owner = THIS_MODULE,
	.open = pcd_open,
	.read = pcd_read,
	.write = pcd_write,
	.release = pcd_release
};

static int __init pcd_driver_init(void)
{
	/*1. dynamically allocate devicee number number */
	alloc_chrdev_region(&device_number,0,1,"pcd_devices");
	pr_info("Major number = %d, Minor number = %d\n",MAJOR(device_number),MINOR(device_number));

	/*2. Initialize the cdev structure with fops*/
	cdev_init(&pcd_cdev,&pcd_fops);

	/*3. Register a device (cdev structure) with VFS */
	cdev_add(&pcd_cdev,device_number,1);

	/* 4. create device class under /sys/class/  */
	class_pcd = class_create(THIS_MODULE,"pcd_class");

	/*5. populates sysfs with device infromation */
	device_pcd = device_create(class_pcd,NULL,device_number,NULL,"pcd");
	
	pr_info("module_init was successful\n");

	return 0;
}

static void __exit pcd_driver_exit(void)
{
	device_destroy(class_pcd,device_number);
	class_destroy(class_pcd);
	cdev_del(&pcd_cdev);
	unregister_chrdev_region(device_number,1);
	pr_info("Module_unloaded\n");
}

module_init(pcd_driver_init);
module_exit(pcd_driver_exit);

MODULE_LICENSE("GPL");